#!/usr/bin/env python3
"""–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ SCIM Proxy Service"""

import sys
import os
import subprocess
import argparse


def run_server():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
    print("üöÄ –ó–∞–ø—É—Å–∫ SCIM Proxy Service...")
    try:
        subprocess.run([
            sys.executable, "-m", "uvicorn", 
            "app.main:app", 
            "--host", "0.0.0.0", 
            "--port", "8000", 
            "--reload"
        ], check=True)
    except KeyboardInterrupt:
        print("\n‚úã –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        sys.exit(1)


def run_tests():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...")
    try:
        result = subprocess.run([
            sys.executable, "-m", "pytest", 
            "tests/", 
            "-v", 
            "--tb=short"
        ], check=False)
        if result.returncode == 0:
            print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
            sys.exit(1)
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤: {e}")
        sys.exit(1)


def install_deps():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    try:
        subprocess.run([
            sys.executable, "-m", "pip", "install", 
            "-r", "requirements-dev.txt"
        ], check=True)
        print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
        sys.exit(1)


def lint_code():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ª–∏–Ω—Ç–µ—Ä–∞–º–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞...")
    
    # Black
    print("  –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å Black...")
    try:
        subprocess.run([
            sys.executable, "-m", "black", 
            "app/", "tests/", "--check"
        ], check=True)
        print("  ‚úÖ Black: –∫–æ–¥ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    except subprocess.CalledProcessError:
        print("  ‚ö†Ô∏è  Black: —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        subprocess.run([
            sys.executable, "-m", "black", 
            "app/", "tests/"
        ])
        print("  ‚úÖ Black: –∫–æ–¥ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω")
    
    # Flake8
    print("  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å Flake8...")
    try:
        subprocess.run([
            sys.executable, "-m", "flake8", 
            "app/", "tests/"
        ], check=True)
        print("  ‚úÖ Flake8: –ø—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    except subprocess.CalledProcessError:
        print("  ‚ùå Flake8: –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã")


def docker_build():
    """–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞"""
    print("üê≥ –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞...")
    try:
        subprocess.run([
            "docker", "build", "-t", "scim-proxy", "."
        ], check=True)
        print("‚úÖ Docker –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ Docker –æ–±—Ä–∞–∑–∞: {e}")
        sys.exit(1)


def docker_run():
    """–ó–∞–ø—É—Å–∫ –≤ Docker"""
    print("üê≥ –ó–∞–ø—É—Å–∫ –≤ Docker...")
    try:
        subprocess.run([
            "docker-compose", "up", "--build"
        ], check=True)
    except KeyboardInterrupt:
        print("\n‚úã Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Docker: {e}")
        sys.exit(1)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="SCIM Proxy Service —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    parser.add_argument(
        "command", 
        choices=["server", "test", "install", "lint", "docker-build", "docker-run"],
        help="–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
    )
    
    args = parser.parse_args()
    
    if args.command == "server":
        run_server()
    elif args.command == "test":
        run_tests()
    elif args.command == "install":
        install_deps()
    elif args.command == "lint":
        lint_code()
    elif args.command == "docker-build":
        docker_build()
    elif args.command == "docker-run":
        docker_run()


if __name__ == "__main__":
    main()